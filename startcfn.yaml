---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to install CloudWatchAgent Linux and Windows Instances'

Parameters:
  
  InstanceKeyPair :
    Description: Name of parameter store which contains the json configuration of CWAgent.
    Type: AWS::EC2::KeyPair::KeyName


Resources:

  CloudWatchAgentReplicatorLinux:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CloudWatchAgentReplicator-Linux
      Type: String
      Value: "{\n\t\"agent\": {\n\t\t\"metrics_collection_interval\": 60,\n\t\t\"run_as_user\": \"root\"\n\t},\n\t\"metrics\": {\n\t\t\"aggregation_dimensions\": [\n\t\t\t[\n\t\t\t\t\"InstanceId\"\n\t\t\t]\n\t\t],\n\t\t\"append_dimensions\": {\n\t\t\t\"AutoScalingGroupName\": \"${aws:AutoScalingGroupName}\",\n\t\t\t\"ImageId\": \"${aws:ImageId}\",\n\t\t\t\"InstanceId\": \"${aws:InstanceId}\",\n\t\t\t\"InstanceType\": \"${aws:InstanceType}\"\n\t\t},\n\t\t\"metrics_collected\": {\n\t\t\t\"cpu\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"cpu_usage_idle\",\n\t\t\t\t\t\"cpu_usage_iowait\",\n\t\t\t\t\t\"cpu_usage_user\",\n\t\t\t\t\t\"cpu_usage_system\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t],\n\t\t\t\t\"totalcpu\": false\n\t\t\t},\n\t\t\t\"disk\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"used_percent\",\n\t\t\t\t\t\"inodes_free\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"diskio\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"io_time\",\n\t\t\t\t\t\"write_bytes\",\n\t\t\t\t\t\"read_bytes\",\n\t\t\t\t\t\"writes\",\n\t\t\t\t\t\"reads\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"mem\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"mem_used_percent\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t},\n\t\t\t\"netstat\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"tcp_established\",\n\t\t\t\t\t\"tcp_time_wait\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t},\n\t\t\t\"swap\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"swap_used_percent\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t}\n\t\t}\n\t}\n}"
      Description: SSM Parameter which is a CloudWatchAgent configuration file. This will be used by CloudWatchAgentReplicator Linux Instance.
      Tags:
        Name: CloudWatchAgentReplicator

  CloudWatchAgentReplicatorWindows:
    Type: AWS::SSM::Parameter
    Properties:
      Name: CloudWatchAgentReplicator-Windows
      Type: String
      Value: "{\n\t\"logs\": {\n\t\t\"logs_collected\": {\n\t\t\t\"files\": {\n\t\t\t\t\"collect_list\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"file_path\": \"C:\\\\ProgramData\\\\Amazon\\\\AmazonCloudWatchAgent\\\\Logs\\\\\",\n\t\t\t\t\t\t\"log_group_name\": \"CWAgentLogs\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\",\n\t\t\t\t\t\t\"retention_in_days\": 3653\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"file_path\": \"C:\\\\inetpub\\\\logs\\\\LogFiles\\\\W3SVC1\\\\\",\n\t\t\t\t\t\t\"log_group_name\": \"IISwebserverLogs\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\",\n\t\t\t\t\t\t\"retention_in_days\": 3653\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"windows_events\": {\n\t\t\t\t\"collect_list\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"event_format\": \"text\",\n\t\t\t\t\t\t\"event_levels\": [\n\t\t\t\t\t\t\t\"VERBOSE\",\n\t\t\t\t\t\t\t\"INFORMATION\",\n\t\t\t\t\t\t\t\"WARNING\",\n\t\t\t\t\t\t\t\"ERROR\",\n\t\t\t\t\t\t\t\"CRITICAL\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"event_name\": \"System\",\n\t\t\t\t\t\t\"log_group_name\": \"System\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\",\n\t\t\t\t\t\t\"retention_in_days\": 3653\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\t\"event_format\": \"text\",\n\t\t\t\t\t\t\"event_levels\": [\n\t\t\t\t\t\t\t\"VERBOSE\",\n\t\t\t\t\t\t\t\"INFORMATION\",\n\t\t\t\t\t\t\t\"WARNING\",\n\t\t\t\t\t\t\t\"ERROR\",\n\t\t\t\t\t\t\t\"CRITICAL\"\n\t\t\t\t\t\t],\n\t\t\t\t\t\t\"event_name\": \"Application\",\n\t\t\t\t\t\t\"log_group_name\": \"Application\",\n\t\t\t\t\t\t\"log_stream_name\": \"{instance_id}\",\n\t\t\t\t\t\t\"retention_in_days\": 3653\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t}\n\t},\n\t\"metrics\": {\n    \"namespace\": \"customercaseTest1\",\n\n\t\t\"aggregation_dimensions\": [\n\t\t\t[\n\t\t\t\t\"InstanceId\"\n\t\t\t]\n\t\t],\n\t\t\"metrics_collected\": {\n\t\t\t\"LogicalDisk\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"% Free Space\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Memory\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"% Committed Bytes In Use\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t},\n\t\t\t\"Paging File\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"% Usage\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"PhysicalDisk\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"% Disk Time\",\n\t\t\t\t\t\"Disk Write Bytes/sec\",\n\t\t\t\t\t\"Disk Read Bytes/sec\",\n\t\t\t\t\t\"Disk Writes/sec\",\n\t\t\t\t\t\"Disk Reads/sec\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"*\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"Processor\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"% User Time\",\n\t\t\t\t\t\"% Idle Time\",\n\t\t\t\t\t\"% Interrupt Time\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60,\n\t\t\t\t\"resources\": [\n\t\t\t\t\t\"_Total\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"TCPv4\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"Connections Established\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t},\n\t\t\t\"TCPv6\": {\n\t\t\t\t\"measurement\": [\n\t\t\t\t\t\"Connections Established\"\n\t\t\t\t],\n\t\t\t\t\"metrics_collection_interval\": 60\n\t\t\t}\n\t\t}\n\t}\n}"
      Description: SSM Parameter which is a CloudWatchAgent configuration file. This will be used by CloudWatchAgentReplicator Windows Instance.
      Tags:
        Name: CloudWatchAgentReplicator      

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: CFTLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'logs:CreateLogDelivery'
                  - 'logs:GetLogDelivery'
                  - 'logs:UpdateLogDelivery'
                  - 'logs:DeleteLogDelivery'
                  - 'logs:ListLogDeliveries'
                  - 'ec2:DescribeVpnConnections'
                  - 'ec2:ModifyVpnConnections' # Adding for API calls
                  - 'ec2:*'
                  - 'ssm:*'
                  - 'logs:*'
                  - 'CloudFormation:*'
                  - 'iam:*'
                Resource: '*'

  CloudWatchAgentReplicatorLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Environment:
        Variables:
          id:
            Ref: InstanceKeyPair
      Code:
        ZipFile: |
            
            import json
            import boto3
            import os
            import time
            from datetime import datetime
            from urllib.parse import urlparse
            from pprint import pprint
                        
            CFNBODY="---\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: 'Template to install CloudWatchAgent Linux and Windows Instances'\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n      -\n        Label:\n          default: \"VPC CIDR\"\n        Parameters:\n          - VpcCIDR\n      -\n        Label:\n          default: \"Subnet CIDR\"\n        Parameters:\n          - PublicSubnetCIDR\n\nParameters:\n\n  InstanceKeyPair:\n    Description: SSH key in your account that will be used by instance created through this replication automation \n    Type : String\n\n  \n  SSMKeyLinux :\n    Description: Name of parameter store which contains the json configuration of CWAgent.\n    Type : String\n    Default: AmazonCloudWatch-linux\n\n  SSMKeyWindows :\n    Description: Name of parameter store which contains the json configuration of CWAgent.\n    Type : String\n    Default: AmazonCloudWatch-Windows\n\n  OSType :\n    Description: OS type , Linux or Windows.\n    Type : String\n    Default: Linux  \n    AllowedValues : [\"Linux\", \"Windows\"]\n\n  LinImageId:\n    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\n    Description: 'Linux 2 AMI '\n    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2\n\n  WinImageId:\n    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>\n    Description: This is default latest Windows server AMI \n    Default: /aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base\n\n  InstanceType:\n    Type: String\n    Description: Choosing  t2 micro\n    Default: t2.micro\n\nResources:\n\n\n  InstanceProfile:\n    Type: AWS::IAM::InstanceProfile\n    Properties:\n      Path: /\n      Roles:\n        - !Ref AgentRole\n\n  AgentRole:\n    Type: AWS::IAM::Role\n    Properties:\n      AssumeRolePolicyDocument:\n        Version: 2012-10-17\n        Statement:\n          - Effect: Allow\n            Principal:\n              Service: ec2.amazonaws.com\n            Action: sts:AssumeRole\n      ManagedPolicyArns:\n        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy\n        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\n        - arn:aws:iam::aws:policy/AmazonSSMFullAccess\n        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy\n      Tags:\n        - Key: \"CloudWatchAgentReplicator\"\n          Value: \"Yes\"\n\n  VPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: 10.0.0.0/16\n      EnableDnsHostnames: true\n      EnableDnsSupport: true\n      InstanceTenancy: default\n      Tags:\n        - Key: Name\n          Value: CloudWatchAgentReplicator-VPC\n        - Key: \"CloudWatchAgentReplicator\"\n          Value: \"Yes\"\n  \n  InternetGateway:\n    Type: AWS::EC2::InternetGateway\n    Properties:\n      Tags:\n        - Key: Name\n          Value: CloudWatchAgentReplicator-IGW\n        - Key: \"CloudWatchAgentReplicator\"\n          Value: \"Yes\"\n  \n  InternetGatewayAttachment:\n    Type: AWS::EC2::VPCGatewayAttachment\n    Properties:\n      InternetGatewayId: !Ref InternetGateway\n      VpcId: !Ref VPC\n  \n  PublicSubnet:\n    Type: AWS::EC2::Subnet\n    Properties:\n      CidrBlock: 10.0.0.0/24\n      MapPublicIpOnLaunch: true\n      Tags:\n        - Key: Name\n          Value: CloudWatchAgentReplicator-PublicSubnet\n        - Key: \"CloudWatchAgentReplicator\"\n          Value: \"Yes\" \n      VpcId: !Ref VPC\n  \n  PublicRouteTable:\n    Type: AWS::EC2::RouteTable\n    Properties:\n      Tags:\n        - Key: Name\n          Value: CloudWatchAgentPublicReplicator-RouteTable\n        - Key: \"CloudWatchAgentReplicator\"\n          Value: \"Yes\"\n      VpcId: !Ref VPC\n  \n  PublicRoute:\n    Type: AWS::EC2::Route\n    Properties:\n      DestinationCidrBlock: 0.0.0.0/0\n      GatewayId: !Ref InternetGateway\n      RouteTableId: !Ref PublicRouteTable\n  \n  PublicSubnetRouteTableAssociation:\n    Type: AWS::EC2::SubnetRouteTableAssociation\n    Properties:\n      RouteTableId: !Ref PublicRouteTable\n      SubnetId: !Ref PublicSubnet\n\n  #Instance creation \n\n  LinuxInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref LinImageId\n      InstanceType: !Ref InstanceType\n      KeyName: !Ref InstanceKeyPair\n      IamInstanceProfile: !Ref InstanceProfile\n      Tags:\n        - Key: Name\n          Value: CloudWatchAgentReplicator-LinuxInstance\n        - Key: \"CloudWatchAgent\"\n          Value: \"Yes\"\n      SubnetId: !Ref PublicSubnet\n      UserData:\n        Fn::Base64:\n          Fn::Sub:\n            - |\n               #!/bin/bash\n               rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm \n               /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ssmkey} -s\n            - { ssmkey: !Ref SSMKeyLinux }\n\n\n  WindowsInstance:\n    Type: AWS::EC2::Instance\n    Properties:\n      ImageId: !Ref WinImageId\n      InstanceType: !Ref InstanceType\n      KeyName: !Ref InstanceKeyPair\n      IamInstanceProfile: !Ref InstanceProfile\n      Tags:\n        - Key: Name\n          Value: CloudWatchAgentReplicator-WindowsInstance\n        - Key: \"CloudWatchAgentReplicator\"\n          Value: \"Yes\"\n      SubnetId: !Ref PublicSubnet\n      UserData:\n        Fn::Base64:\n          Fn::Sub:\n            - |\n               <powershell>\n               $command = \"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\"\n               Invoke-Expression $command\n               Invoke-WebRequest -Uri \"https://awscli.amazonaws.com/AWSCLIV2.msi\" -Outfile C:\\AWSCLIV2.msi\n               $arguments = \"/i `\"C:\\AWSCLIV2.msi`\" /quiet\"\n               Start-Process msiexec.exe -ArgumentList $arguments -Wait\n               $dir = $env:TEMP + \"\\CWAgent\"\n               New-Item -ItemType directory -Path $dir -Force\n               cd $dir\n               Invoke-WebRequest -Uri https://s3.amazonaws.com/amazoncloudwatch-agent/windows/amd64/latest/amazon-cloudwatch-agent.msi -OutFile $env:TEMP\\CWAgent\\amazon-cloudwatch-agent.msi\n               timeout /t 20\n               msiexec /i $env:TEMP\\CWAgent\\amazon-cloudwatch-agent.msi\n               timeout /t 20\n               cd \"C:\\Program Files\\Amazon\\AmazonCloudWatchAgent\"\n               timeout /t 5\n               ./amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c ssm:${ssmkey} -s\n\n               </powershell>\n                \n            - { ssmkey: !Ref SSMKeyWindows }\n\nOutputs:\n  DemoInstanceId:\n    Description: Instance Id\n    Value: !Ref LinuxInstance"
            def launch_stack():
              cfn = boto3.client('cloudformation')
              current_ts = datetime.now().isoformat().split('.')[0].replace(':','-')
              stackname = 'CWAgentReplicatorInfra'
              capabilities = ['CAPABILITY_IAM', 'CAPABILITY_AUTO_EXPAND']
              try:
                stackdata = cfn.create_stack(
                  StackName=stackname,
                  DisableRollback=True,
                  TemplateBody=CFNBODY,
                  Parameters=[
                  {'ParameterKey': 'InstanceKeyPair','ParameterValue': os.environ['id']},  
                  {'ParameterKey': 'SSMKeyLinux','ParameterValue': 'CloudWatchAgentReplicator-Linux'},
                  {'ParameterKey': 'SSMKeyWindows','ParameterValue': 'CloudWatchAgentReplicator-Windows'},
                  {'ParameterKey': 'OSType','ParameterValue': 'Linux'},
                  {'ParameterKey': 'LinImageId','ParameterValue': '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'},
                  {'ParameterKey': 'WinImageId','ParameterValue': '/aws/service/ami-windows-latest/Windows_Server-2016-English-Full-Base'}
                  
                  ],
                  Capabilities=capabilities)
              except Exception as e:
                    error_msg = str(e)
                    print(error_msg)
                    stackdata = {"error": error_msg}
              return stackdata  
            def stack_success(stackdata):
              if 'error' in stackdata:
                return False
              else:
                return True


            def update_config(ins_id,OSType):
              ssm = boto3.client('ssm')
              print("In update_config")
              print(ins_id)
              print(OSType)
              instanceid=ins_id
              if OSType == "Linux":
                response = ssm.send_command(
                  InstanceIds=[instanceid],
                  DocumentName="AWS-RunShellScript",
                  Parameters={'commands': ['sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c ssm:CloudWatchAgentReplicator-Linux']}
                  )
              
                command_id = response['Command']['CommandId']
                      
                time.sleep(7)
                      
                output = ssm.get_command_invocation(
                  CommandId=command_id,
                  InstanceId=instanceid
                  )
              
              elif OSType == "Windows":
                response = ssm.send_command(
                  InstanceIds=[instanceid],
                  DocumentName="AWS-RunPowerShellScript",
                  Parameters={'commands': ['& "C:\Program Files\Amazon\AmazonCloudWatchAgent\amazon-cloudwatch-agent-ctl.ps1" -a fetch-config -m ec2 -s -c ssm:CloudWatchAgentReplicator-Windows']}
                  )
              
                command_id = response['Command']['CommandId']
                      
                time.sleep(7)
                      
                output = ssm.get_command_invocation(
                  CommandId=command_id,
                  InstanceId=instanceid
                  )
                
              return output



            def get_instanceid(OsType):
              tagValue='CloudWatchAgentReplicator-'+OsType
              print(tagValue)
              client=boto3.client('ec2')
              respons = client.describe_tags(
                Filters=[
                    {
                        'Name': 'tag:Name',
                        'Values': [
                            tagValue,
                        ]
                    },
                ],
                )

              return respons['Tags']


            def vpcCheck():
              print("in vpcCheck")
              client=boto3.client('ec2')
              response = client.describe_tags(
                Filters=[
                    {
                        'Name': 'tag:Name',
                        'Values': [
                            'CloudWatchAgentReplicator-VPC',
                        ]
                    }
                ]
              )


              if not response['Tags']:
                print("There is not vpc found with tag in vpcCheck function means we have to launch the stack for initial infra setup")
                return "NotExist"
              else:
                # checking if there are multiple VPC creations
                if len(response['Tags']) > 1:
                    return "there are multiple vpcs which have tags as CWAgent replicator. you may need to check if there are any redundant VPC creation through multiple runs of CWAgent replicator"
                else:
                    print("There is already a vpc that is tagged with CWAgent replicator project so no need to craete the stack, check if instance exists or not") 
                    return "exists"

            def init_setup():
              print("init_setup")

              if vpcCheck() == "NotExist":
                print("Your region does not have VPC related to CWAgentReplicator thus, creating the setup from scratch")
                stack_result=launch_stack()
                print(stack_result)
                if stack_success(stack_result):
                  resp_txt = "Your stack has been launched"
                  print("Your stack has been launched. Please visit the AWS Console to track its progress")
                  time.sleep(90)
                else:
                  resp_txt = "Your stack failed to launch"
                  print("Your stack failed to launch. Please visit the AWS Console to investigate further")

              else:
                resp_txt = "VPC already exists"
                print("VPC already exists, please check your Configure test input, are you sure you want to use InitialSetup Or use RunLinux Or RunWindows in Configure Test input of Lambda function, Please check wiki for more info. Or please check if you have multiple VPCs")

              return resp_txt



            def lambda_handler(event, context):
              client=boto3.client('ec2')
              print("Event is ",str(event))
              if 'EventType' in event:
                if event['EventType'] == "RunLinux":
                  print("linux block")

                  if init_setup() == "VPC already exists":
                    inst_check=get_instanceid('LinuxInstance')
                    if (inst_check==[]):
                      print("VPC for CloudWatch agent exists however, there is no Linux instance present in it either in STOPPED or RUNNING STATE. You might have to create the infra again by deleting the older one and creating new one")
                      return "VPC for CloudWatch agent exists however, there is no Linux instance present in it either in STOPPED or RUNNING STATE. You might have to create the infra again by deleting the older one and creating new one"

                    else:
                      instanceid=inst_check[0]["ResourceId"]
                      response = client.describe_instance_status(InstanceIds=[instanceid])

                      if (response['InstanceStatuses']== []):
                        client.start_instances(InstanceIds=[instanceid], DryRun=False)
                        print("Linux EC2 Instance : "+instanceid+" has Started")
                        time.sleep(200)
                        result=update_config(instanceid,"Linux")
                      
                    
                      elif (response['InstanceStatuses'][0]['InstanceState']['Name'] == 'running'):
                        result=update_config(instanceid,"Linux")

                      else: 
                        return "Some error occurred while trying to run linux instance for CWAgentReplicator" 
                  else: 
                        return "Some error occurred while trying to run linux instance for CWAgentReplicator"   
              

                  
                  
                elif event['EventType'] == "RunWindows":
                  print("Windows block")
                  if init_setup() == "VPC already exists":
                    inst_check=get_instanceid('WindowsInstance')
                    if (inst_check==[]):
                      print("VPC for CloudWatch agent exists however, there is no Linux instance present in it either in STOPPED or RUNNING STATE. You might have to create the infra again by deleting the older one and creating new one")
                      return "VPC for CloudWatch agent exists however, there is no Linux instance present in it either in STOPPED or RUNNING STATE. You might have to create the infra again by deleting the older one and creating new one"

                    else:
                      instanceid=inst_check[0]["ResourceId"]
                      response = client.describe_instance_status(InstanceIds=[instanceid])

                      if (response['InstanceStatuses']== []):
                        client.start_instances(InstanceIds=[instanceid], DryRun=False)
                        print("Linux EC2 Instance : "+instanceid+" has Started")
                        time.sleep(200)
                        result=update_config(instanceid,"Windows")
                      
                    
                      elif (response['InstanceStatuses'][0]['InstanceState']['Name'] == 'running'):
                        result=update_config(instanceid,"Windows")

                      else: 
                        return "Some error occurred while trying to run linux instance for CWAgentReplicator" 
                  else: 
                        return "Some error occurred while trying to run linux instance for CWAgentReplicator"   
              
                  
                  
                  
                  
                elif event['EventType'] == "InitialSetup":
                  print("InitialSetup block")
                  result=init_setup()
              
              else:
                print("This will be default config as there was no EventType key found in test configure input.")
                result=init_setup()

                
              return result 
     

      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 900
      Role: !GetAtt
          - LambdaExecutionRole
          - Arn
  